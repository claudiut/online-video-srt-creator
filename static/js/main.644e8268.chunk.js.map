{"version":3,"sources":["services/Storage/helper.ts","services/helper.ts","AppState/Observables.ts","AppState/Actions.ts","hooks/useObservedValue.ts","hooks/useKeyboardShortcutsEffect.ts","services/VideoPlayer/YoutubePlayer.ts","VideoPlayer/VideoPlayer.tsx","Subscribe.tsx","services/Translation/TranslationLine.ts","services/Translation/TranslationLineSerializer.ts","Translations/TranslationForm.tsx","Translations/TranslationFooter.tsx","Translations/TranslationHeader.tsx","Translations/TranslationListItem.tsx","Translations/TranslationList.tsx","Translations/Translations.tsx","TranslationPreview.tsx","App.tsx","reportWebVitals.ts","services/Storage/LocalStorage.ts","index.tsx"],"names":["storage","splitLines","content","split","splitParagraphs","replacements","removeLeftZeroPadding","string","length","test","replace","computeParsedToSeconds","h","m","s","ms","BYPASS_SHORTCUTS_CLASS","SPLIT_CONTENT_TYPES","NONE","LINE","PARAGRAPH","url$","BehaviorSubject","player$","undefined","translations$","currentTime$","pipe","map","player","of","mergeAll","previewedTranslation$","combineLatest","translations","currentTime","time","find","t","isTimedFor","hasOnlyStart","startsBeforeOrAt","getLatestTranslationForTime","setTranslations","next","replaceTranslation","newTranslation","getValue","tr","setPlayer","useObservedValue","observable$","initialValue","useState","value","setValue","useEffect","subscription","subscribe","unsubscribe","shortcutBypassed","event","className","target","includes","useKeyboardShortcutsEffect","listeners","space","handler","key","preventDefault","togglePlay","type","leftArrow","seekPrevious","rightArrow","seekNext","enter","playerCurrentTime","getCurrentTime","firstUntimedIndex","findIndex","isTimed","firstUntimedTranslationIndex","firstUntimed","getStartTime","setStartTime","currentTrIndex","currentTr","prevTr","getEndTime","normalizeStartTimeBasedOnPrevious","setEndTime","listenerOptions","capture","Object","values","forEach","listener","document","addEventListener","removeEventListener","YouTubePlayer","url","this","videoId","match","parseYoutubeIdFromUrl","load","Observable","subscriber","lastPlayerTime","intervalId","setInterval","playerTime","clearInterval","createVideoPlayerCurrentTimeObservable","getState","isPlaying","pause","play","seek","destroy","containerId","VideoPlayer","playerInstance","YTPlayer","dispose","id","memo","Subscribe","children","TranslationLine","startTime","endTime","setContent","text","replaceAll","textLine","trim","join","TranslationLineSerializer","trLine","getContent","dto","translation","paddingLength","toString","padStart","oneHourInSec","hours","Math","floor","minutes","seconds","miliseconds","paddedH","numberWithZeroPadding","paddedM","paddedS","paddedMs","filter","index","secondsWithMsToSrtTimeString","srtContents","console","log","timeReg","regexp","RegExp","matchAll","startH","parseInt","startM","startS","startMs","endH","endM","endS","endMs","push","TranslationForm","forwardRef","inputRef","onSave","onCancel","splitType","setSplitType","onSubmit","rows","onChange","ref","onClick","v","TranslationFooter","showAddForm","setShowAddForm","trs","trContent","addTranslation","style","visibility","files","reader","FileReader","onload","e","importedTranslations","parseSrt","result","onerror","evt","readAsText","accept","multiple","disabled","elem","createElement","srt","toSrt","setAttribute","encodeURIComponent","filename","display","body","appendChild","click","removeChild","TranslationHeader","formatTranslationTime","trunc","TranslationListItem","isCurrentlyPreviewed","handleResetTime","resetStart","removeStartTime","removeEndTime","handleRemove","removeTranslation","setCurrentTime","stopPropagation","focus","TranslationList","previewedTranslation","Translations","TranslationPreview","App","placeholder","previewedTr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","STORAGE_KEY","object","toDto","sessionStorage","setItem","JSON","stringify","json","getItem","parse","fromDto","get","set","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.644e8268.chunk.js","sourcesContent":["import { setTranslations } from \"../../AppState/Actions\";\nimport { translations$ } from \"../../AppState/Observables\"\nimport IStorage from \"./IStorage\";\n\nexport const bindPersistentStorage = (storage: IStorage) => {\n  setTranslations(storage.get());\n  // save translations in storage when they update\n  translations$.subscribe((translations) => {\n    storage.set(translations)\n  });\n}","import { Observable } from 'rxjs';\n\nimport TranslationLine from './Translation/TranslationLine';\nimport IVideoPlayer from './VideoPlayer/IVideoPlayer';\n\nexport const splitLines = (content: string): string[] => {\n  return content.split(/[\\n\\r]+/);\n}\n\nexport const splitParagraphs = (content: string): string[] => {\n  return content.split(/[\\n\\r]{2,}/);\n}\n\nconst replacements = [\n  ['ã', 'ă'],\n  ['þ', 'ț'],\n  ['­', '-'],\n  [/\\s+/g, ' '],\n  [/-{2,}/g, '-'],\n  [/\\bcaci\\b/g, 'căci'],\n  [/\\bCaci\\b/g, 'Căci']\n];\nexport const normalizeText = (text: string): string => {\n  Object.values(replacements).forEach(([key, value]) => text = text.replaceAll(key, value as string));\n\n  return splitLines(text).map(textLine => textLine.trim()).join('\\n');\n};\n\n// get the translation with timing set around the given time\n// OR the first that starts at/after the given time\nexport const getLatestTranslationForTime = (translations: TranslationLine[], time: number): TranslationLine | undefined => {\n  return translations.find(t => (\n    t.isTimedFor(time) || (t.hasOnlyStart() && t.startsBeforeOrAt(time))\n  ));\n}\n\nexport const createVideoPlayerCurrentTimeObservable = (player: IVideoPlayer): Observable<number> => (\n  new Observable<number>(subscriber => {\n    let lastPlayerTime: number;\n    const intervalId = setInterval(() => {\n      const playerTime = player.getCurrentTime();\n      // prevent observer notification for same time value\n      if (playerTime !== lastPlayerTime) {\n        subscriber.next(playerTime);\n        lastPlayerTime = playerTime;\n      }\n    }, 5);\n\n    return {\n      unsubscribe() {\n        clearInterval(intervalId);\n      }\n    }\n  })\n);\n\nexport const removeLeftZeroPadding = (string: string) => {\n  if (string[0] === '0' && string.length > 1) {\n    return /^[0]+$/.test(string) ? '0' : string.replace(/^[0]+/, '');\n  }\n\n  return string;\n};\n\nexport const computeParsedToSeconds = (h: number, m: number, s: number, ms: number): number => {\n  return h * 3600 + m * 60 + s + ms / 1000;\n}\n\nexport const BYPASS_SHORTCUTS_CLASS = 'bypass-global-shortcuts';\n\nexport const SPLIT_CONTENT_TYPES = {\n  NONE: 'none',\n  LINE: 'line',\n  PARAGRAPH: 'paragraph',\n}","import { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { map, mergeAll } from 'rxjs/operators';\nimport { getLatestTranslationForTime } from '../services/helper';\n\nimport TranslationLine from \"../services/Translation/TranslationLine\";\nimport IVideoPlayer from \"../services/VideoPlayer/IVideoPlayer\";\n\nexport const url$ = new BehaviorSubject<string>('');\n\nexport const player$ = new BehaviorSubject<IVideoPlayer|undefined>(undefined);\n\nexport const translations$ = new BehaviorSubject<TranslationLine[]>([]);\n\nexport const currentTime$: Observable<number|undefined> = player$.pipe(\n  map(player => player ? player.currentTime$ : of(undefined)),\n).pipe(mergeAll());\n\nexport const previewedTranslation$: Observable<TranslationLine|undefined> = (\n  combineLatest([translations$, currentTime$]).pipe(\n    map(([translations, currentTime]) => currentTime\n      ? getLatestTranslationForTime(translations, currentTime)\n      : undefined\n    ),\n  )\n);\n","import { player$, translations$, url$ } from \"./Observables\";\nimport TranslationLine from \"../services/Translation/TranslationLine\";\nimport IVideoPlayer from \"../services/VideoPlayer/IVideoPlayer\";\n\nexport const setTranslations = (translations: TranslationLine[]) => translations$.next(translations);\n\n// replace the old translation with the new one, finding it by instance equality\nexport const replaceTranslation = (newTranslation: TranslationLine) => {\n  const translations = translations$.getValue();\n  setTranslations(translations.map(tr => tr === newTranslation ? newTranslation : tr));\n};\n\nexport const removeTranslation = (translation: TranslationLine) => {\n  const translations = translations$.getValue();\n  setTranslations(translations.filter(tr => tr !== translation));\n};\n\nexport const setUrl = (url: string) => url$.next(url);\n\nexport const setPlayer = (player: IVideoPlayer|undefined) => player$.next(player);\n","import { useEffect, useState } from \"react\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\nconst useObservedValue = <T>(observable$: Observable<T>): T|undefined => {\n  const initialValue = observable$ instanceof BehaviorSubject\n    ? observable$.getValue()\n    : undefined;\n  const [value, setValue] = useState(initialValue);\n\n  useEffect(() => {\n    const subscription = observable$.subscribe(setValue);\n    return () => {\n      subscription.unsubscribe()\n    };\n  }, [observable$])\n\n  return value;\n};\n\nexport default useObservedValue;\n","import { useEffect } from \"react\";\n\nimport { BYPASS_SHORTCUTS_CLASS } from \"../services/helper\";\nimport TranslationLine from \"../services/Translation/TranslationLine\";\nimport { player$, translations$ } from \"../AppState/Observables\";\nimport useObservedValue from \"./useObservedValue\";\nimport { setTranslations } from \"../AppState/Actions\";\n\nconst shortcutBypassed = (event: KeyboardEvent) => {\n  const { className } = (event.target as HTMLElement);\n  return className && className.includes(BYPASS_SHORTCUTS_CLASS);\n}\n\nconst firstUntimedTranslationIndex = (translations: TranslationLine[]): number => (\n  translations.findIndex((t) => !t.isTimed())\n);\n\n// if start time is very close to the previrous translation's end time,\n// join them for smooth transitions (+1ms)\nconst normalizeStartTimeBasedOnPrevious = (\n  translations: TranslationLine[],\n  currentTrIndex: number\n): TranslationLine | undefined => {\n  if (currentTrIndex === 0) {\n    return;\n  }\n\n  const currentTr = translations[currentTrIndex];\n  const prevTr = translations[currentTrIndex - 1];\n  if (\n    currentTr.getStartTime()\n    && prevTr.getEndTime()\n    && ((currentTr.getStartTime() as number) - (prevTr.getEndTime() as number) < 0.2)\n  ) {\n    currentTr.setStartTime(prevTr.getEndTime() as number + 0.001);\n  }\n};\n\ntype ShortcutEvent = 'keydown' | 'click';\ntype ShortcutHandler = (e: KeyboardEvent | MouseEvent) => void;\n\nconst useKeyboardShortcutsEffect = () => {\n  const player = useObservedValue(player$);\n  const translations = useObservedValue(translations$) as TranslationLine[];\n\n  useEffect(() => {\n    if (!player) {\n      return;\n    }\n\n    const listeners = {\n        space: {\n          handler: (event: KeyboardEvent) => {\n            if (!shortcutBypassed(event) && event.key === ' ') {\n              event.preventDefault();\n              player.togglePlay();\n            }\n          },\n          type: 'keydown',\n        },\n        leftArrow: {\n          handler: (event: KeyboardEvent) => {\n            if (!shortcutBypassed(event) && event.key === 'ArrowLeft') {\n              event.preventDefault();\n              player.seekPrevious();\n            }\n          },\n          type: 'keydown',\n        },\n        rightArrow: {\n          handler: (event: KeyboardEvent) => {\n            if (!shortcutBypassed(event) && event.key === 'ArrowRight') {\n              event.preventDefault();\n              player.seekNext();\n            }\n          },\n          type: 'keydown',\n        },\n        enter: {\n          handler: (event: KeyboardEvent) => {\n            if (!shortcutBypassed(event) && event.key === 'Enter') {\n              const playerCurrentTime = player.getCurrentTime();\n              event.preventDefault();\n\n              const firstUntimedIndex = firstUntimedTranslationIndex(translations);\n              if (firstUntimedIndex === -1) {\n                return;\n              }\n              const firstUntimed = translations[firstUntimedIndex];\n              if (firstUntimed.getStartTime() === undefined) {\n                firstUntimed.setStartTime(playerCurrentTime);\n                normalizeStartTimeBasedOnPrevious(translations, firstUntimedIndex);\n              } else if (firstUntimed.getEndTime() === undefined) {\n                firstUntimed.setEndTime(playerCurrentTime);\n              }\n\n              setTranslations([...translations])\n            }\n          },\n          type: 'keydown',\n        },\n      };\n      const listenerOptions = {capture: true};\n\n      Object.values(listeners).forEach((listener) => {\n        document.addEventListener(\n          listener.type as ShortcutEvent, \n          listener.handler as ShortcutHandler,\n          listenerOptions\n        );\n      });\n\n      return () => {\n        Object.values(listeners).forEach((listener) => {\n          document.removeEventListener(\n            listener.type as ShortcutEvent,\n            listener.handler as ShortcutHandler,\n            listenerOptions\n          );\n        })\n      };\n  }, [player, translations]);\n}\n\nexport default useKeyboardShortcutsEffect;","import { Observable } from 'rxjs';\nimport YTPlayer from 'yt-player';\nimport { createVideoPlayerCurrentTimeObservable } from '../helper';\n\nimport IVideoPlayer from './IVideoPlayer';\n\nconst parseYoutubeIdFromUrl = (url: string): string => {\n  const match = url.match(/\\?v=([^&]+)/);\n  return match?.[1] ?? '';\n}\n\nexport default class YouTubePlayer implements IVideoPlayer {\n  public currentTime$: Observable<number>;\n\n  private player: YTPlayer;\n\n  constructor(player: YTPlayer, url: string) {\n    this.player = player;\n\n    const videoId = parseYoutubeIdFromUrl(url);\n    if (videoId) {\n      this.player.load(videoId);\n    }\n\n    this.currentTime$ = createVideoPlayerCurrentTimeObservable(this);\n  }\n\n  isPlaying() {\n    return this.player.getState() === 'playing';\n  }\n\n  togglePlay() {\n    this.isPlaying() ? this.player.pause() : this.player.play();\n  }\n\n  seekPrevious() {\n    this.player.seek(this.player.getCurrentTime() - 5);\n  }\n\n  seekNext() {\n    this.player.seek(this.player.getCurrentTime() + 5);\n  }\n\n  setCurrentTime(time: number) {\n    if (this.player.getState() !== 'cued') {\n      this.player.seek(time);\n      return;\n    }\n\n    // If the video has not been started yet but we seek, start it (to load), pause it and then seek\n    // otherise it will not seek\n    const subscription = this.currentTime$.subscribe((currentTime) => {\n      if (currentTime > 0) {\n        this.player.pause();\n        subscription.unsubscribe();\n        this.player.seek(time);\n      }\n    });\n    this.player.play();\n  }\n\n  getCurrentTime(): number {\n    return this.player.getCurrentTime();\n  }\n\n  dispose() {\n    this.player.destroy();\n  }\n}","import React, { memo, useEffect } from 'react';\nimport YTPlayer from 'yt-player';\nimport { setPlayer } from '../AppState/Actions';\nimport useKeyboardShortcutsEffect from '../hooks/useKeyboardShortcutsEffect';\n\nimport YouTubePlayer from '../services/VideoPlayer/YoutubePlayer';\n\nconst containerId = 'video-player';\n\ninterface Props { url: string }\n\nconst VideoPlayer = ({ url }: Props) => {\n    useKeyboardShortcutsEffect();\n\n    useEffect(() => {\n        if (!url) {\n            setPlayer(undefined);\n            return;\n        }\n\n        const playerInstance = new YouTubePlayer(new YTPlayer(`#${containerId}`), url);\n        setPlayer(playerInstance);\n\n        return () => {\n            playerInstance.dispose();\n        }\n    }, [url]);\n\n    return (\n        <div id=\"player-wrapper\">\n            <div id={containerId}></div>\n        </div>\n    );\n};\n\nexport default memo(VideoPlayer);","import { ReactNode } from 'react';\nimport { Observable } from 'rxjs';\n\nimport useObservedValue from './hooks/useObservedValue';\n\ninterface Props<T> {\n    observable$: Observable<T>;\n    children: (value: T|undefined) => ReactNode;\n}\n\nconst Subscribe = <T,>({ observable$, children }: Props<T>) => {\n    const value = useObservedValue<T>(observable$);\n    // Fragment usage here is a fix for \"'ReactNode' is not a valid JSX element\",\n    // currently don't hnow to fix this type issue\n    return <>{children(value)}</>;\n}\n\nexport default Subscribe;\n","import { normalizeText } from \"../helper\";\n\nexport default class TranslationLine {\n  private content: string = '';\n  private startTime?: number;\n  private endTime?: number;\n\n  constructor(content: string = '') {\n    this.setContent(content);\n  }\n\n  setContent(content: string): void {\n    this.content = normalizeText(content);\n  }\n\n  getContent(): string {\n    return this.content;\n  }\n\n  setStartTime(startTime: number): void {\n    this.startTime = startTime;\n  }\n\n  getStartTime(): number | undefined {\n    return this.startTime;\n  }\n\n  setEndTime(endTime: number): void {\n    this.endTime = endTime;\n  }\n\n  removeStartTime(): void {\n    this.startTime = undefined;\n  }\n\n  removeEndTime(): void {\n    this.endTime = undefined;\n  }\n\n  getEndTime(): number | undefined {\n    return this.endTime;\n  }\n\n  isTimed(): boolean {\n    return !!(this.startTime && this.endTime);\n  }\n\n  isTimedFor(time: number): boolean {\n    return this.isTimed() && time >= (this.startTime as number) && time < (this.endTime as number);\n  }\n\n  hasOnlyStart(): boolean {\n    return this.getEndTime() === undefined && this.getStartTime() !== undefined\n  }\n\n  startsBeforeOrAt(time: number): boolean {\n    return (this.getStartTime() as number) <= time;\n  }\n}","import { computeParsedToSeconds, removeLeftZeroPadding } from '../helper';\nimport TranslationLine from './TranslationLine';\nimport TranslationLineDto from './TranslationLineDto';\n\nexport const LINE_SEP = '\\n\\n';\nexport const NEWLINE_SEP = '\\n';\nexport default class TranslationLineSerializer {\n  static toDto(trLine: TranslationLine): TranslationLineDto {\n    return {\n      content: trLine.getContent(),\n      startTime: trLine.getStartTime(),\n      endTime: trLine.getEndTime(),\n    }\n  }\n\n  static fromDto(dto: TranslationLineDto): TranslationLine {\n    const translation = new TranslationLine(dto.content);\n    if (dto.startTime) {\n      translation.setStartTime(dto.startTime);\n    }\n    if (dto.endTime) {\n      translation.setEndTime(dto.endTime);\n    }\n    return translation;\n  }\n\n  static numberWithZeroPadding(value: number, paddingLength: number = 2): string {\n    return value.toString().padStart(paddingLength, '0');\n  }\n\n  static secondsWithMsToSrtTimeString(value: number): string {\n    const oneHourInSec = 60 * 3600;\n    const hours = Math.floor(value / oneHourInSec);\n    const minutes = Math.floor((value - hours * oneHourInSec) / 60);\n    const seconds = Math.floor(value - hours * oneHourInSec - minutes * 60);\n    const miliseconds = Math.floor((value - hours * oneHourInSec - minutes * 60 - seconds) * 1000);\n\n    const paddedH = this.numberWithZeroPadding(hours);\n    const paddedM = this.numberWithZeroPadding(minutes);\n    const paddedS = this.numberWithZeroPadding(seconds);\n    const paddedMs = miliseconds ? miliseconds.toString() : '000';\n\n    return `${paddedH}:${paddedM}:${paddedS},${paddedMs}`;\n  }\n\n  static toSrt(translations: TranslationLine[]): string {\n    return translations\n      .filter(t => t.isTimed())\n      .map((t, index) => {\n        const parts = [\n          `${index + 1}`,\n          `${this.secondsWithMsToSrtTimeString(t.getStartTime() as number)} --> ${this.secondsWithMsToSrtTimeString(t.getEndTime() as number)}`,\n          t.getContent()\n        ];\n        return parts.join(NEWLINE_SEP);\n      })\n      .join(LINE_SEP)\n  }\n\n  static parseSrt(srtContents: string): TranslationLine[] {\n    console.log(\"srtContents\", srtContents);\n    const timeReg = '(\\\\d+):(\\\\d+):(\\\\d+),(\\\\d+)';\n    const regexp = new RegExp(`(\\\\d+)${NEWLINE_SEP}${timeReg}\\\\s-->\\\\s${timeReg}${NEWLINE_SEP}(.+)(${LINE_SEP})?`, 'g');\n    const match = srtContents.matchAll(regexp);\n  \n    const translations = [];\n\n    for (const m of match) {\n      console.log(m);\n      const t = new TranslationLine(m[10]);\n\n      const startH = parseInt(removeLeftZeroPadding(m[2]));\n      const startM = parseInt(removeLeftZeroPadding(m[3]));\n      const startS = parseInt(removeLeftZeroPadding(m[4]));\n      const startMs = parseInt(removeLeftZeroPadding(m[5]));\n      console.log(startH,\nstartM,\nstartS,\nstartMs);\n      t.setStartTime(computeParsedToSeconds(startH, startM, startS, startMs));\n\n      const endH = parseInt(removeLeftZeroPadding(m[6]));\n      const endM = parseInt(removeLeftZeroPadding(m[7]));\n      const endS = parseInt(removeLeftZeroPadding(m[8]));\n      const endMs = parseInt(removeLeftZeroPadding(m[9]));\n      t.setEndTime(computeParsedToSeconds(endH, endM, endS, endMs));\n\n      translations.push(t);\n    }\n\n    return translations;\n  }\n}","import { ChangeEvent, FormEvent, forwardRef, Ref, useState } from \"react\";\nimport { BYPASS_SHORTCUTS_CLASS, SPLIT_CONTENT_TYPES } from \"../services/helper\";\n\ntype Props = {\n    onSave: (content: string, splitType: string) => void\n    onCancel: () => void\n}\n\nconst TranslationForm = forwardRef(\n    ({ onSave, onCancel }: Props, inputRef: Ref<HTMLTextAreaElement>) => {\n        const [content, setContent] = useState<string>('');\n        const [splitType, setSplitType] = useState<string>(SPLIT_CONTENT_TYPES.NONE);\n\n        const handleSubmit = (event: FormEvent) => {\n            event.preventDefault();\n            if (!content) {\n                return;\n            }\n            onSave(content, splitType);\n            setContent('');\n        }\n\n        const handleSelectSplitType = (event: ChangeEvent<HTMLSelectElement>) => {\n            setSplitType(event.target.value);\n        }\n\n        return (\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <textarea\n                        rows={30}\n                        value={content}\n                        className={`w-100 ${BYPASS_SHORTCUTS_CLASS}`}\n                        onChange={({ target: { value }} )=> setContent(value)}\n                        ref={inputRef}\n                    ></textarea>\n                </div>\n                <div className=\"flex justify-between\">\n                    <div>\n                        <button type=\"reset\" onClick={onCancel}>Cancel</button>\n                    </div>\n                    <div>\n                        Split by\n                        <select value={splitType} onChange={handleSelectSplitType}>\n                        {\n                            Object.values(SPLIT_CONTENT_TYPES).map(v => (\n                                <option key={v} value={v}>{v}</option>\n                            ))\n                        }\n                        </select>\n                        <button type=\"submit\">Save</button>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n)\n\nexport default TranslationForm;","import React, { ChangeEvent, useState } from \"react\";\nimport { setTranslations } from \"../AppState/Actions\";\nimport { splitLines, splitParagraphs, SPLIT_CONTENT_TYPES } from \"../services/helper\";\nimport TranslationLine from \"../services/Translation/TranslationLine\";\n\nimport TranslationLineSerializer from \"../services/Translation/TranslationLineSerializer\";\nimport TranslationForm from \"./TranslationForm\";\n\ninterface Props {\n    translations: TranslationLine[],\n}\n\nconst addTranslation = (content: string, splitType: string, translations: TranslationLine[]) => {\n    content = content.trim();\n\n    if (splitType === SPLIT_CONTENT_TYPES.NONE) {\n        setTranslations([...translations, new TranslationLine(content)])\n        return;\n    }\n\n    const splitFn = splitType === SPLIT_CONTENT_TYPES.LINE ? splitLines : splitParagraphs;\n\n    const trs = splitFn(content).map((trContent) => new TranslationLine(trContent));\n    setTranslations([...translations, ...trs]);\n};\n\nconst TranslationFooter = ({ translations }: Props) => {\n    const [showAddForm, setShowAddForm] = useState<boolean>(false);\n\n    const handleClickAddTranslation = () => {\n        setShowAddForm(!showAddForm);\n    };\n\n    const handleSave = (content: string, splitType: string) => {\n        addTranslation(content, splitType, translations);\n        setShowAddForm(false);\n    };\n\n    const handleDownload = () => {\n        const elem = document.createElement('a');\n        const srt = TranslationLineSerializer.toSrt(translations);\n        elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(srt));\n        const filename = `${translations[0].getContent().split('\\n')[0]}.srt`;\n        elem.setAttribute('download', filename);\n        elem.style.display = 'none';\n        document.body.appendChild(elem);\n\n        elem.click();\n        document.body.removeChild(elem);\n    }\n\n    const handleImport = (event: ChangeEvent<HTMLInputElement>) => {\n        if (!event.target.files) {\n            return;\n        }\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            if (!e.target) {\n                console.log('File is empty!', e.target);\n                return;\n            }\n\n            const importedTranslations = TranslationLineSerializer.parseSrt(e.target.result as string);\n            setTranslations(importedTranslations);\n        }\n        reader.onerror = function (evt) {\n            console.log('Error loading file', evt);\n        }\n        reader.readAsText(event.target.files[0], \"UTF-8\");\n    }\n\n    return (\n        <div>\n            {showAddForm && (\n                <TranslationForm\n                    onSave={handleSave}\n                    onCancel={() => setShowAddForm(false)}\n                />\n            )}\n            <div>\n                <button\n                    onClick={handleClickAddTranslation}\n                    style={{visibility: showAddForm ? 'hidden' : 'visible'}}\n                >\n                    Add Translation\n                </button>\n            </div>\n            <div className=\"pa3\">\n                <div>Help</div>\n                <ol>\n                    <li>Press Space to play/pause the video and left/right arrow to jump back/forward</li>\n                    <li>Press Enter to set the start/end time of translation to current video position</li>\n                </ol>\n            </div>\n            <div className=\"tc flex\">\n                Import SRT:&nbsp;<input type=\"file\" onChange={handleImport} accept=\".srt\" multiple={false} />\n                <button disabled={!translations.length} onClick={handleDownload}>Download<br />⬇</button>\n            </div>\n        </div>\n    )\n};\n\nexport default TranslationFooter;","const TranslationHeader = () => (                \n    <div className=\"w-100 flex pa1\">\n        <div className=\"w-third flex\">\n            <strong className=\"w-50\">Start</strong>\n            <strong className=\"w-50\">End</strong>\n        </div>\n        <div className=\"w-third\"><strong>Subtitle</strong></div>\n        <div className=\"w-third\"><strong>Actions</strong></div>\n    </div>\n);\n\nexport default TranslationHeader;","import TranslationLine from \"../services/Translation/TranslationLine\";\nimport { removeTranslation, replaceTranslation } from \"../AppState/Actions\";\nimport IVideoPlayer from \"../services/VideoPlayer/IVideoPlayer\";\n\nconst formatTranslationTime = (time?: number) => time ? Math.trunc(time * 10000) / 10000 : '-'\n\ninterface Props {\n    translation: TranslationLine,\n    isCurrentlyPreviewed: boolean,\n    player?: IVideoPlayer\n};\n\nconst TranslationListItem = ({ translation, isCurrentlyPreviewed = false, player }: Props) => {\n    const startTime = translation.getStartTime();\n\n    const handleResetTime = (resetStart: boolean = true) => {\n        resetStart ? translation.removeStartTime() : translation.removeEndTime();\n        replaceTranslation(translation);\n    };\n\n    const handleRemove = () => {\n        removeTranslation(translation);\n    };\n\n    const handleClick = () => {\n        if(player && startTime) {\n            player.setCurrentTime(startTime);\n        }\n    };\n\n    return (\n        <div\n            onClick={handleClick}\n            className={\n                `w-100 flex translation-line items-center\n                ${isCurrentlyPreviewed ? 'previewing' : ''}\n                ${startTime ? 'scheduled' : ''}\n                `\n            }\n        >\n            <div className=\"w-third flex\">\n                <div className=\"w-50\">{formatTranslationTime(startTime)}</div>\n                <div className=\"w-50\">{formatTranslationTime(translation.getEndTime())}</div>\n            </div>\n            <div className=\"w-third\">\n                <span className=\"pre\">{translation.getContent()}</span>\n            </div>\n            <div className=\"w-third flex\">\n                <button onClick={(e) => {e.stopPropagation(); handleResetTime(); document.body.focus();}}>ResetStart</button>\n                <button onClick={(e) => {e.stopPropagation(); handleResetTime(false); document.body.focus();}}>ResetEnd</button>\n                <button onClick={(e) => {e.stopPropagation(); handleRemove(); document.body.focus();}}>Delete</button>\n            </div>\n        </div>\n    );\n};\n\nexport default TranslationListItem;","import { player$, previewedTranslation$ } from \"../AppState/Observables\";\nimport useObservedValue from \"../hooks/useObservedValue\";\nimport TranslationLine from \"../services/Translation/TranslationLine\";\nimport TranslationListItem from \"./TranslationListItem\";\nimport './Translations.scss';\n\ntype Props = {\n    translations: TranslationLine[];\n}\n\nconst TranslationList = ({ translations }: Props) => {\n    const previewedTranslation = useObservedValue(previewedTranslation$);\n    const player = useObservedValue(player$);\n\n    return (\n        <div id=\"translations\" className={`overflow-y-auto pa1 ${translations.length > 0 ? 'has-translations' : ''}`}>\n            {\n                translations.map((t, index) => (\n                    <TranslationListItem\n                        key={index}\n                        translation={t}\n                        isCurrentlyPreviewed={t === previewedTranslation}\n                        player={player}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default TranslationList;","import React from \"react\";\nimport { translations$ } from \"../AppState/Observables\";\n\nimport Subscribe from \"../Subscribe\";\nimport TranslationFooter from \"./TranslationFooter\";\nimport TranslationHeader from \"./TranslationHeader\";\nimport TranslationList from \"./TranslationList\";\n\nconst Translations = () => {\n    return (\n        <div className=\"flex flex-column w-100\">\n            <TranslationHeader />\n            <Subscribe observable$={translations$}>\n                {\n                    (translations = []) => (\n                        <>\n                            <TranslationList translations={translations} />\n                            <TranslationFooter translations={translations} />\n                        </>\n                    )\n                }\n            </Subscribe>\n        </div>\n    )\n};\n\nexport default Translations;","import { ReactElement } from \"react\";\nimport TranslationLine from \"./services/Translation/TranslationLine\";\n\ntype Props = {\n    previewedTranslation: TranslationLine;\n}\n\nconst TranslationPreview = ({ previewedTranslation }: Props): ReactElement => (\n    <div className=\"tc pa2 f4\">\n        <span className=\"pre\">{previewedTranslation.getContent()}</span>\n    </div>\n);\n\nexport default TranslationPreview;","import React from 'react';\n\nimport './App.scss';\nimport VideoPlayer from './VideoPlayer/VideoPlayer';\nimport Translations from './Translations/Translations';\nimport TranslationPreview from './TranslationPreview';\nimport { previewedTranslation$, url$ } from './AppState/Observables';\nimport Subscribe from './Subscribe';\nimport { setUrl } from './AppState/Actions';\n\nconst App = () => (\n    <div className=\"flex justify-center h-100\">\n        <div className=\"w-100 w-70-m flex flex-column\">\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Video URL\"\n                    className=\"w-100\"\n                    onChange={(e) => setUrl((e.target.value || '').trim()) }\n                />\n            </div>\n            <div className=\"flex h-100\">\n                <Subscribe observable$={url$}>\n                    {(url) => {\n                        if (!url) {\n                            return (\n                                <div className=\"flex justify-center items-center tc pa2\">\n                                    Please enter a video URL in the text field above\n                                </div>\n                            );\n                        }\n\n                        return (\n                            <div>\n                                <VideoPlayer url={url} />\n                                <Subscribe observable$={previewedTranslation$}>\n                                    {(previewedTr) => \n                                        previewedTr && <TranslationPreview previewedTranslation={previewedTr} />\n                                    }\n                                </Subscribe>\n                            </div>\n                        );\n                }}\n                </Subscribe>\n                <Translations />\n            </div>\n        </div>\n    </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import TranslationLine from \"../Translation/TranslationLine\";\nimport TranslationLineDto from \"../Translation/TranslationLineDto\";\nimport TranslationLineSerializer from \"../Translation/TranslationLineSerializer\";\nimport IStorage from \"./IStorage\";\n\nconst STORAGE_KEY = 'translation';\n\nexport default class LocalStorage implements IStorage {\n  set(translations: TranslationLine[]): void {\n    const object = translations.map((t) => TranslationLineSerializer.toDto(t))\n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(object));\n  }\n\n  get(): TranslationLine[] {\n    const json = sessionStorage.getItem(STORAGE_KEY) || JSON.stringify([]);\n\n    return JSON.parse(json).map(\n      (dto: TranslationLineDto) => TranslationLineSerializer.fromDto(dto)\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { bindPersistentStorage } from './services/Storage/helper';\nimport LocalStorage from './services/Storage/LocalStorage';\n\nbindPersistentStorage(new LocalStorage());\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}